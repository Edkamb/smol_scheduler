abstract class Twin() end

/**
 *  Class PlantToWater; it represents the id of the plant to water
 *  This information is needed by the scheduler to send to signal to water
 *  @class PlantToWater
 */
class PlantToWater extends Twin (String plantId, Int pumpGpioPin, String pumpId)
end

/**
 *  Class Plant; represents a physical plant. It is initially retrieved by
 *  the asset model, but it can be reconfigured by the program model.
 *  Each plant is associated with a pot. The Pot contains the information
 *  about which plant contains
 *  @class Plant
 */
class Plant extends Twin (String plantId, Double idealMoisture, String plantType, String healthState)
    Double getNdvi()
        Double healthState = 0.0;
        List<Double> influxReturn = null;

        influxReturn = access(
            "from(bucket: \"greenhouse\")
                |> range(start: -30d)
                |> filter(fn: (r) => r[\"_measurement\"] == \"ast:plant\")
                |> filter(fn: (r) => r[\"_field\"] == \"ndvi\")
                |> filter(fn: (r) => r[\"plant_id\"] == %1)
                |> keep(columns: [\"_value\"])
                |> last()",
        INFLUXDB("config_local.yml"),
        this.plantId);

        if influxReturn != null then
            healthState = influxReturn.get(0);
        end
        
        return healthState;
    end

    Double getPotMoisture()
        Double moisture = 100.0;
        List<Double> influxReturn = null;

        influxReturn = access(
            "from(bucket: \"greenhouse\")
                |> range(start: -30d)
                |> filter(fn: (r) => r[\"_measurement\"] == \"ast:pot\")
                |> filter(fn: (r) => r[\"_field\"] == \"moisture\")
                |> filter(fn: (r) => r[\"plant_id\"] == %1)
                |> keep(columns: [\"_value\"])
                |> last()",
        INFLUXDB("config_local.yml"),
        this.plantId);
        
        if influxReturn != null then
            moisture = influxReturn.get(0);
        end

        return moisture;
    end
end

/**
 *  Class HealthState; represents the health state of a plant via ndvi.
 *  @class HealthState
 */
class HealthState extends Twin (String name, Double minNdvi, Double maxNdvi)
end

/**
 *  Class Pot; represents a physical pot. It is initially retrieved by
 *  the asset model, but it can be reconfigured by the program model.
 *  Each pot is associated with a moisture sensor.
 *  @class Pot
 */
class Pot extends Twin (String shelfFloor, String groupPosition, String potPosition, String pumpId, String plantId) 
    // Return last moisture detection for the pot
    Double getMoisture()
        Double moisture = 0.0;
        List<Double> influxReturn = null;
        
        // uses list because influx queries return lists
        influxReturn = access(
            "from(bucket: \"greenhouse\")
                |> range(start: -30d)
                |> filter(fn: (r) => r[\"_measurement\"] == \"ast:pot\")
                |> filter(fn: (r) => r[\"_field\"] == \"moisture\")
                |> filter(fn: (r) => r[\"group_position\"] == %1)
                |> filter(fn: (r) => r[\"pot_position\"] == %2)
                |> filter(fn: (r) => r[\"shelf_floor\"] == %3)
                |> keep(columns: [\"_value\"])
                |> last()",
        INFLUXDB("config_local.yml"),
        this.groupPosition,
        this.potPosition,
        this.shelfFloor);

        if influxReturn != null then
            Int length = influxReturn.length();
            print(length);
            // get first value of list (list contains just one value)
            moisture = influxReturn.get(0);
        end
        
        return moisture;
    end
end

/**
 *  Class Shelf; represents a physical shelf. It is initially retrieved by
 *  the asset model, but it can be reconfigured by the program model.
 *  @class Shelf
 */
class Shelf extends Twin (String shelfFloor)
end

/**
 *  Class Pump; represents a physical pump. It is initially retrieved by
 *  the asset model, but it can be reconfigured by the program model.
 *  @class Pump
 */
class Pump extends Twin (Int pumpGpioPin, String pumpId)
end

/**
 *  Class GreeHouse; it represents the actual greenhouse; as it is a singleton
 *  it will not be retrieved by the asset model, but it will be created by the
 *  program model.
 *  @class GreenHouse
 */
class GreenHouse extends Twin ()
    // get last light measurement for the greenhouse
    Double getLight()
        Double light = null;
        List<Double> influxReturn = null;

        // get light measurement from influx
        influxReturn = access(
            "from(bucket: \"greenhouse\")
                |> range(start: -30d)
                |> filter(fn: (r) => r[\"_measurement\"] == \"ast:greenhouse\")
                |> filter(fn: (r) => r[\"_field\"] == \"light\")
                |> keep(columns: [\"_value\"])
                |> last()",
            INFLUXDB("config_local.yml"));
        
        if influxReturn != null then
            light = influxReturn.get(0);
        end
        
        return light;
    end
end

/**
 *  Asset model class; it will create the model based on the asset model
 *  as well as dealing with reconfiguration in case of a change in the
 *  program model.
 *  @class AssetModel
 */
class AssetModel extends Twin ()
    /**
     *  Method invoke the reconfigure the pumps. It will add pumps that are not
     *  in the program model and destroy pumps that are not in the asset model.
     *
     *  @method reconfigurePumps
     */
    Unit reconfigurePump()
        print("RECONFIG> Reconfiguring the pumps");
        Int i = 0;

        /**
         *  Add pumps that are not in the program model
         */
        List<Pump> newPumps = construct("
            PREFIX ast: <http://www.semanticweb.org/gianl/ontologies/2023/1/sirius-greenhouse#>
            SELECT ?pumpGpioPin ?pumpId ?plantId
            WHERE {
                ?pump rdf:type ast:Pump ;
                    ast:hasPumpGpioPin ?pumpGpioPin ;
                    ast:hasPumpId ?pumpId .
                FILTER NOT EXISTS {
                    ?y a prog:Pump ;
                        prog:Pump_pumpGpioPin ?pumpGpioPin ;
                        prog:Pump_pumpId ?pumpId .
                }
            }");

        if newPumps == null then print("RECONFIG> No new pumps"); else
            print("RECONFIG> New Pump(s) detected: repairing the model");

            Int newPumpsLength = newPumps.length();
            i = 0;
            while i < newPumpsLength do
                Pump newPump = newPumps.get(i);

                print("RECONFIG> New pump detected: ");
                print(newPump.pumpId);
                print(newPump.pumpGpioPin);
                i = i + 1;
            end

            print("RECONFIG> Pump(s) added");
        end

        /**
         *  Destroy pumps that are not in the asset model
         */
        List<Pump> wrongPumps = access("
            PREFIX ast: <http://www.semanticweb.org/gianl/ontologies/2023/1/sirius-greenhouse#>
            SELECT DISTINCT ?obj
            WHERE {
                ?obj a prog:Pump ;
                    prog:Pump_pumpGpioPin ?pumpGpioPin ;
                    prog:Pump_pumpId ?pumpId .
                FILTER NOT EXISTS {
                    ?x rdf:type ast:Pump ;
                        ast:hasPumpGpioPin ?pumpGpioPin ;
                        ast:hasPumpId ?pumpId .
                }
            }");

        if wrongPumps == null then print("RECONFIG> No misconfigured pumps"); else
            print("RECONFIG> Misconfigured Pump(s) detected: repairing the model");

            Int wrongPumpsLength = wrongPumps.length();
            i = 0;
            while i < wrongPumpsLength do
                Pump wrongPump = wrongPumps.get(i);

                print("RECONFIG> Misconfigured pump to remove: ");
                print(wrongPump.pumpId);

                destroy(wrongPump);
                
                i = i + 1;
            end

            destroy(wrongPumps);
        end
    end

    /**
     *  Method invoked to reconfigure plants. It will add plants that are not
     *  in the program model and destroy plants that are not in the asset model.
     *
     *  @method reconfigurePlants
     */
    Unit reconfigurePlants()
        print("RECONFIG> Reconfiguring the plants");
        Int i = 0;

        /**
         *  Add plants that are not in the program model
         */
        List<Plant> newPlants = construct("
            PREFIX ast: <http://www.semanticweb.org/gianl/ontologies/2023/1/sirius-greenhouse#>
            SELECT ?plantId ?idealMoisture ?plantType
            WHERE {
                ?x rdf:type ast:Plant ;
                    ast:hasPlantId ?plantId ;
                    ast:hasIdealMoisture ?idealMoisture ;
                    ast:hasPlantType ?plantType .
                FILTER NOT EXISTS {
                    ?y a prog:Plant ;
                        prog:Plant_plantId ?plantId ;
                        prog:Plant_idealMoisture ?idealMoisture ;
                        prog:Plant_plantType ?plantType .
                }
            }");


        if newPlants == null then print("RECONFIG> No new plants"); else
            print("RECONFIG> New Plant(s) detected: repairing the model");

            Int newPlantsLength = newPlants.length();
            i = 0;
            while i < newPlantsLength do
                Plant newPlant = newPlants.get(i);

                print("RECONFIG> New plant detected: ");
                print(newPlant.plantId);
                print(newPlant.idealMoisture);
                print(newPlant.plantType);

                i = i + 1;
            end

            print("RECONFIG> Plant(s) added");
        end

        Plant p = new Plant("6", 50.0, "Basilicum", "bad");

        /**
         *  Destroy plants that are not in the asset model
         */
        List<Plant> wrongPlants = access("
            PREFIX ast: <http://www.semanticweb.org/gianl/ontologies/2023/1/sirius-greenhouse#>
            SELECT DISTINCT ?obj
            WHERE {
                ?obj a prog:Plant ;
                    prog:Plant_plantId ?plantId ;
                    prog:Plant_idealMoisture ?idealMoisture ;
                    prog:Plant_plantType ?plantType .
                FILTER NOT EXISTS {
                    ?y rdf:type ast:Plant ;
                        ast:hasPlantId ?plantId ;
                        ast:hasIdealMoisture ?idealMoisture ;
                        ast:hasPlantType ?plantType .
                }
            }");

        if wrongPlants == null then print("RECONFIG> No misconfigured plants"); else
            print("RECONFIG> Misconfigured Plant(s) detected: repairing the model");

            Int wrongPlantsLength = wrongPlants.length();
            i = 0;
            while i < wrongPlantsLength do
                Plant wrongPlant = wrongPlants.get(i);

                print("RECONFIG> Misconfigured plant to remove: ");
                print(wrongPlant.plantId);
                print(wrongPlant.idealMoisture);
                print(wrongPlant.plantType);
                
                destroy(wrongPlant);
                
                i = i + 1;
            end

            destroy(wrongPlants);
        end
    end

    /**
     *  Method invoked to reconfigure pots. It will add pots that are not
     *  in the program model and destroy pots that are not in the asset model.
     *
     *  @method reconfigurePots
     */
    Unit reconfigurePots()
        print("RECONFIG> Reconfiguring the pots");
        Int i = 0;
        
        /**
         *  Add pots that are not in the program model
         */
        List<Pot> newPots = construct("
            PREFIX ast: <http://www.semanticweb.org/gianl/ontologies/2023/1/sirius-greenhouse#>
            SELECT ?shelfFloor ?groupPosition ?potPosition ?pumpId ?plantId
            WHERE {
                ?x rdf:type ast:Pot ; 
                    ast:hasShelfFloor ?shelfFloor ;
                    ast:hasGroupPosition ?groupPosition ;
                    ast:hasPotPosition ?potPosition ;
                    ast:isWateredBy ?pump ;
                    ast:hasPlant ?plant .
                ?pump rdf:type ast:Pump ;
                    ast:hasPumpId ?pumpId .
                ?plant rdf:type ast:Plant ;
                    ast:hasPlantId ?plantId .
                FILTER NOT EXISTS {
                    ?y a prog:Pot ; 
                        prog:Pot_helfFloor ?shelfFloor ;
                        prog:Pot_groupPosition ?groupPosition ;
                        prog:Pot_potPosition ?potPosition ;
                        prog:Pot_pumpId ?pumpId ;
                        prog:Pot_plantId ?plantId .
                }
            }");


        if newPots == null then print("RECONFIG> No new pots"); else
            print("RECONFIG> New Pot(s) detected: repairing the model");

            Int newPotsLength = newPots.length();
            i = 0;
            while i < newPotsLength do
                Pot newPot = newPots.get(i);
                print("RECONFIG> New pot detected: ");
                print(newPot.shelfFloor);
                print(newPot.groupPosition);
                print(newPot.potPosition);
                print(newPot.pumpId);
                print(newPot.plantId);
                i = i + 1;
            end

            print("RECONFIG> Pot(s) added");
        end

        /**
         *  Destroy pots that are not in the asset model
         */
        List<Pot> wrongPots = access("
            PREFIX ast: <http://www.semanticweb.org/gianl/ontologies/2023/1/sirius-greenhouse#>
            SELECT DISTINCT ?obj
            WHERE {
                ?obj a prog:Pot ;
                    prog:Pot_shelfFloor ?shelfFloor ;
                    prog:Pot_groupPosition ?groupPosition ;
                    prog:Pot_potPosition ?potPosition .
                FILTER NOT EXISTS {
                    ?y rdf:type ast:Pot ; 
                        ast:hasShelfFloor ?shelfFloor ;
                        ast:hasGroupPosition ?groupPosition ;
                        ast:hasPotPosition ?potPosition .
                }
            }");

        if wrongPots == null then print("RECONFIG> No misconfigured pots"); else
            print("RECONFIG> Misconfigured Pot(s) detected: repairing the model");

            Int wrongPotsLength = wrongPots.length();
            i = 0;
            while i < wrongPotsLength do
                Pot wrongPot = wrongPots.get(i);

                print("RECONFIG> Misconfigured pot to remove: ");
                print(wrongPot.shelfFloor);
                print(wrongPot.groupPosition);
                print(wrongPot.potPosition);
                
                destroy(wrongPot);
                
                i = i + 1;
            end

            destroy(wrongPots);
        end
    end

    /**
     *  Method invoked to reconfigure health state. It will add those that are not
     *  in the program model and destroy health states that are not in the asset model.
     *
     *  @method reconfigureHealthStates
     */
    Unit reconfigureHealthStates()
        print("RECONFIG> Reconfiguring the health states");
        Int i = 0;

        /**
         *  Add health states that are not in the program model
         */
        List<HealthState> newHealthStates = construct("
            PREFIX ast: <http://www.semanticweb.org/gianl/ontologies/2023/1/sirius-greenhouse#>
            SELECT ?name ?maxNdvi ?minNdvi
            WHERE {
                ?healthState rdf:type ast:HealthState ;
                    ast:hasName ?name ;
                    ast:hasMaxNdvi ?maxNdvi ;
                    ast:hasMinNdvi ?minNdvi .
                FILTER NOT EXISTS {
                    ?y a prog:HealthState ;
                        prog:HealthState_name ?name ;
                        prog:HealthState_maxNdvi ?maxNdvi ;
                        prog:HealthState_minNdvi ?minNdvi .
                }
            }");

        if newHealthStates == null then print("RECONFIG> No new health states"); else
            print("RECONFIG> New Health State(s) detected: repairing the model");

            Int newHealthStatesLength = newHealthStates.length();
            i = 0;
            while i < newHealthStatesLength do
                HealthState newHealthState = newHealthStates.get(i);

                print("RECONFIG> New Health State detected: ");
                print(newHealthState.name);
                print(newHealthState.maxNdvi);
                print(newHealthState.minNdvi);

                i = i + 1;
            end

            print("RECONFIG> Health State(s) added");
        end

        /**
         *  Destroy health states that are not in the asset model
         */
        List<HealthState> wrongHealthStates = access("
            PREFIX ast: <http://www.semanticweb.org/gianl/ontologies/2023/1/sirius-greenhouse#>
            SELECT DISTINCT ?obj
            WHERE {
                ?obj a prog:HealthState ;
                    prog:HealthState_name ?name ;
                    prog:HealthState_maxNdvi ?maxNdvi ;
                    prog:HealthState_minNdvi ?minNdvi .
                FILTER NOT EXISTS {
                    ?y rdf:type ast:HealthState ;
                        ast:hasName ?name ;
                        ast:hasMaxNdvi ?maxNdvi ;
                        ast:hasMinNdvi ?minNdvi .
                }
            }");

        if wrongHealthStates == null then print("RECONFIG> No misconfigured health states"); else
            print("RECONFIG> Misconfigured Health State(s) detected: repairing the model");

            Int wrongHealthStatesLength = wrongHealthStates.length();
            i = 0;
            while i < wrongHealthStatesLength do
                Plant wrongHealthState = wrongHealthStates.get(i);

                print("RECONFIG> Misconfigured plant to remove: ");
                print(wrongHealthState.healthStateId);
                print(wrongHealthState.healthStateName);
                
                destroy(wrongHealthState);
                
                i = i + 1;
            end

            destroy(wrongHealthStates);
        end
    end

    Unit reconfigure()
        print("RECONFIG> Reconfiguring the asset model...");

        // Calling the reconfiguration methods
        this.reconfigurePump();
        this.reconfigurePlants();
        this.reconfigurePots();
        this.reconfigureHealthStates();

        print("RECONFIG> Reconfiguring DONE...");

        print("BEHAVIOUR> Behavioural reconfiguration of the asset model...");
        Int i = 0;
        Int j = 0;
        // List of plants (ids of plants) that need to be watered
        List<PlantToWater> plantsToWater = null;

        List<Plant> plants = access("
            PREFIX ast: <http://www.semanticweb.org/gianl/ontologies/2023/1/sirius-greenhouse#>
            SELECT DISTINCT ?obj
            WHERE {
                ?obj a prog:Plant ;
                    prog:Plant_plantId ?plantId ;
                    prog:Plant_idealMoisture ?idealMoisture .
            }");

        if plants != null then
            Int plantsLength = plants.length();

            i = 0;
            while i < plantsLength do
                Plant plant = plants.get(i);
                
                if plant != null then
                    Double plantMoisture = plant.getPotMoisture();

                    if (plantMoisture < plant.idealMoisture) then
                        print("BEHAVIOUR> Plant that has to be watered: ");
                        print(plant.plantId);

                        // Get from SPARQL the pumpId of the pot that contain the plant with plantId
                        Pot potToWater = access("
                            PREFIX ast: <http://www.semanticweb.org/gianl/ontologies/2023/1/sirius-greenhouse#>

                            SELECT DISTINCT ?obj
                            WHERE {
                                ?obj a prog:Pot ;
                                    prog:Pot_pumpId ?pumpId ;
                                    prog:Pot_plantId %1 .
                            }
                        ", plant.plantId);

                        print(potToWater.pumpId);

                        List<Pump> pumpsThatWater = access("
                            SELECT ?obj
                            WHERE {
                            ?obj a prog:Pump ;
                                    prog:Pump_pumpId ?pumpId ;
                                    prog:Pump_pumpGpioPin ?pumpGpioPin .
                            ?pot a prog:Pot ;
                                    prog:Pot_plantId ?plantId ;
                                    prog:Pot_pumpId ?pumpId .
                            ?plant a prog:Plant ;
                                prog:Plant_plantId %1 .
                            }
                        ", plant.plantId);

                        if pumpsThatWater != null then
                            Pump pumpThatWater = pumpsThatWater.get(0);

                            PlantToWater plantToWater = new PlantToWater(plant.plantId, pumpThatWater.pumpGpioPin, pumpThatWater.pumpId);
                            plantsToWater = new List(plantToWater, plantsToWater);

                            print("BEHAVIOUR> pump id: ");
                            print(pumpThatWater.pumpId);
                        else
                            print("Error in creating an object");
                        end
                    end

                    List<HealthState> healthStates = access("
                        PREFIX ast: <http://www.semanticweb.org/gianl/ontologies/2023/1/sirius-greenhouse#>
                        SELECT DISTINCT ?obj
                        WHERE {
                            ?obj a prog:HealthState ;
                                prog:HealthState_healthStateId ?healthStateId ;
                                prog:HealthState_healthStateName ?healthStateName .
                        }");
                
                    if healthStates != null then
                        Int healthStatesLength = healthStates.length();
                        j = 0;
                        while j < healthStatesLength do
                            HealthState healthState = healthStates.get(j);
                            Double plantNdvi = plant.getNdvi();

                            Double healthStateMinNdvi = healthState.minNdvi;
                            Double healthStateMaxNdvi = healthState.maxNdvi;

                            Boolean minOk = plantNdvi >= healthStateMinNdvi;
                            Boolean maxOk = plantNdvi <= healthStateMaxNdvi;

                            if minOk then
                                if maxOk then
                                    print("BEHAVIOUR> Plant in good health");
                                    plant.healthState = healthState.name;
                                end
                            end
                            
                            j = j + 1;
                        end
                    end
                end
                
                i = i + 1;
            end
        end

        print("BEHAVIOUR> Behavioural reconfiguration DONE...");
    end
end

main
    AssetModel assetModel = new AssetModel();
    assetModel.reconfigure();

    breakpoint;
end
