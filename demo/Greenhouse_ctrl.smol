class AssetController (AssetModel model)
    // clears the list of decisions
    Unit clearDecisions()
        while this.model.decisions != null do
            List<Decision> nx = this.model.decisions.next;
            destroy(this.model.decisions.content);
            destroy(this.model.decisions);
            this.model.decisions = nx;
        end
    end

    Unit decision()
        this.clearDecisions();
        print("BEHAVIOUR> Behavioural reconfiguration of the asset model...");

        // Retrieve all plants in the digital twin
        // NOTE: no explicit bookkeeping!
        List<Plant> plants = access("
            SELECT DISTINCT ?obj
            WHERE {
                ?obj a prog:Plant ;
                    prog:Plant_plantId ?plantId ;
                    prog:Plant_idealMoisture ?idealMoisture .
            }");

            //Iterate over all plant
        while plants != null do
            Plant plant = plants.content;
            plants = plants.next;

            if plant != null then
                //Decision is made here
                Double plantMoisture = plant.getPotMoisture();

                if (plantMoisture < plant.idealMoisture) then
                    print("BEHAVIOUR> Plant that has to be watered: " ++ plant.plantId);

                    //Get the Pump for this plant
                    List<Pump> pumpsThatWater = access("
                        SELECT ?obj  {
                            ?obj prog:Pump_pumpId ?pumpId.
                            ?pot prog:Pot_plantId %1 ;
                                 prog:Pot_pumpId ?pumpId .
                        }", plant.plantId);

                    // Generate decision
                    if pumpsThatWater != null then
                        Pump pumpThatWater = pumpsThatWater.content;

                        Decision plantToWater = new Decision(plant.plantId, pumpThatWater.pumpGpioPin, pumpThatWater.pumpId);
                        this.model.decisions = new List<Decision>(plantToWater, this.model.decisions);

                        print("BEHAVIOUR> pump id: " ++ pumpThatWater.pumpId);
                    else
                        print("Could not retrieve pump!");
                    end
                end

                //NDVI START
                //check all healthstates in the digital twin and check whether we are within some bounds
                List<HealthState> healthStates = access("
                    SELECT DISTINCT ?obj {
                        ?obj a prog:HealthState ;
                             prog:HealthState_healthStateId ?healthStateId ;
                             prog:HealthState_healthStateName ?healthStateName .
                    }");

                while healthStates != null do
                    HealthState healthState = healthStates.content;
                    healthStates = healthStates.next;
                    Double plantNdvi = plant.getNdvi();

                    if plantNdvi >= healthState.minNdvi & plantNdvi <= healthState.maxNdvi then
                            print("BEHAVIOUR> Plant in good health");
                            plant.healthState = healthState.name;
                    end
                end
                //NDVI END
            end
        end
    end
end